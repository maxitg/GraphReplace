version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  wolfram-language:
    docker:
      - image: maxitg/set-replace-wl-ci:12.1.1
        auth:
          username: maxitg
          password: $DOCKERHUB_PASSWORD

    steps:
      - checkout

      - run:
          name: Build
          command: ./build.wls

      - store_artifacts:
          path: ./LibraryResources/

      - run:
          name: Install
          command: ./install.wls

      - store_artifacts:
          path: ./BuiltPaclets/

      - run:
          name: Reinstall
          command: ./install.wls

      - run:
          name: Test
          command: ./.circleci/test.sh

      - run:
          name: Performance Test
          command: ./performanceTest.wls master @HEAD 2
  cpp:
    docker:
      - image: maxitg/set-replace-cpp-ci

    steps:
      - checkout

      - run:
          name: Lint
          command: |
            set +eo pipefail
            ./lint.sh
            if [ $? -ne 0 ]
            then
              echo "Please run scripts/install_git_hooks.sh to detect linting issues before git push."
              exit 1
            fi

      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake .. -DSET_REPLACE_BUILD_TESTING=ON \
                     -DSET_REPLACE_ENABLE_ALLWARNINGS=ON
            cmake --build .

      - run:
          name: Test
          command: ./libSetReplaceTest.sh

      - store_test_results:
          path: TestResults

  cpp-32:
    docker:
      - image: i386/alpine:3.12.1
        auth:
          username: maxitg
          password: $DOCKERHUB_PASSWORD

    steps:
      - checkout

      - run:
          name: Install Required Tools
          command: apk add --no-cache bash git g++ make cmake

      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake .. -DSET_REPLACE_BUILD_TESTING=ON \
                     -DSET_REPLACE_ENABLE_ALLWARNINGS=ON
            cmake --build .

      - run:
          name: Test
          command: ./libSetReplaceTest.sh

      - store_test_results:
          path: TestResults

  windows:
    executor:
      name: win/default
      shell: bash.exe

    steps:
      - checkout

      - run:
          name: Install CMake
          command: |
            cmakeURL=$(\
              curl -s https://api.github.com/repos/Kitware/CMake/releases/latest \
              | grep 'browser_download_url' \
              | cut -d\" -f4 \
              | grep win64-x64.zip)
            curl -L --output cmake-win64-x64.zip $cmakeURL
            unzip -q cmake-win64-x64.zip
            cmakeDir=$(dir -1 | findstr -i cmake-*-win64-x64)
            echo "export PATH=\"$(pwd)/$cmakeDir/bin:$PATH\"" >> $BASH_ENV

      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake .. -DSET_REPLACE_ENABLE_ALLWARNINGS=ON -DBUILD_SHARED_LIBS=ON
            cmake --build . --config Release

      - store_artifacts:
          path: ./build/Release/

workflows:
  version: 2
  build-and-test:
    jobs:
      - wolfram-language
      - cpp
      - cpp-32
      - windows
